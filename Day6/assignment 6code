//leetcode 1
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        Dictionary<int, int> dic = new Dictionary<int, int>();
        for(int i = 0; i < nums.Length; i++) {
            if(dic.ContainsKey(nums[i])) {
                return new int[] {dic[nums[i]], i};
            }
            if (!dic.ContainsKey(target - nums[i]))
                dic.Add(target - nums[i], i);
        }
        return  new int[] {-1, -1};
    }
}


//leetcode 9. Palindrome Number
public class Solution {
    public bool IsPalindrome(int x) {
        string s = x.ToString();
        int l = 0, r = s.Length-1;
        while(l < r) {
            if(s[l++] != s[r--]) return false;
        }
        return true;
    }
}


//leetcode 217. Contains Duplicate
public class Solution {
    public bool ContainsDuplicate(int[] nums) {
        HashSet<int> set = new HashSet<int>();
        foreach(int i in nums) {
            if(set.Contains(i)) return true;
            set.Add(i);
        }
        return false;
    }
}


//leetcode 412. Fizz Buzz
public class Solution {
    public IList<string> FizzBuzz(int n) {
        IList<string> list = new List<string>();
        for(int i = 1; i <= n; i++) {
            if(i % 3 == 0 && i % 5 == 0) {
                list.Add("FizzBuzz");
            } else if (i % 3 == 0) {
                list.Add("Fizz");
            } else if (i % 5 == 0){
                list.Add("Buzz");
            } else {
                list.Add(Convert.ToString(i));
            }
        }
        return list;
    }
}